//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace LiveTileScheduledTaskAgent.MTDService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="rsp", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class rsp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string timeField;
        
        private string changeset_idField;
        
        private bool new_changesetField;
        
        private LiveTileScheduledTaskAgent.MTDService.Status statusField;
        
        private LiveTileScheduledTaskAgent.MTDService.rqst rqstField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.CalendarDate> calendar_datesField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.UsageDay> daysField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.departure> departuresField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Itinerary> itinerariesField;
        
        private string last_updatedField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Reroute> reroutesField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Route> routesField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Shape> shapesField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.StopTime> stop_timesField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Stop> stopsField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Trip> tripsField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.vehicle> vehiclesField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string changeset_id {
            get {
                return this.changeset_idField;
            }
            set {
                if ((object.ReferenceEquals(this.changeset_idField, value) != true)) {
                    this.changeset_idField = value;
                    this.RaisePropertyChanged("changeset_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public bool new_changeset {
            get {
                return this.new_changesetField;
            }
            set {
                if ((this.new_changesetField.Equals(value) != true)) {
                    this.new_changesetField = value;
                    this.RaisePropertyChanged("new_changeset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public LiveTileScheduledTaskAgent.MTDService.Status status {
            get {
                return this.statusField;
            }
            set {
                if ((object.ReferenceEquals(this.statusField, value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public LiveTileScheduledTaskAgent.MTDService.rqst rqst {
            get {
                return this.rqstField;
            }
            set {
                if ((object.ReferenceEquals(this.rqstField, value) != true)) {
                    this.rqstField = value;
                    this.RaisePropertyChanged("rqst");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.CalendarDate> calendar_dates {
            get {
                return this.calendar_datesField;
            }
            set {
                if ((object.ReferenceEquals(this.calendar_datesField, value) != true)) {
                    this.calendar_datesField = value;
                    this.RaisePropertyChanged("calendar_dates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=6)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.UsageDay> days {
            get {
                return this.daysField;
            }
            set {
                if ((object.ReferenceEquals(this.daysField, value) != true)) {
                    this.daysField = value;
                    this.RaisePropertyChanged("days");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=7)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.departure> departures {
            get {
                return this.departuresField;
            }
            set {
                if ((object.ReferenceEquals(this.departuresField, value) != true)) {
                    this.departuresField = value;
                    this.RaisePropertyChanged("departures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=8)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Itinerary> itineraries {
            get {
                return this.itinerariesField;
            }
            set {
                if ((object.ReferenceEquals(this.itinerariesField, value) != true)) {
                    this.itinerariesField = value;
                    this.RaisePropertyChanged("itineraries");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=9)]
        public string last_updated {
            get {
                return this.last_updatedField;
            }
            set {
                if ((object.ReferenceEquals(this.last_updatedField, value) != true)) {
                    this.last_updatedField = value;
                    this.RaisePropertyChanged("last_updated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=10)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Reroute> reroutes {
            get {
                return this.reroutesField;
            }
            set {
                if ((object.ReferenceEquals(this.reroutesField, value) != true)) {
                    this.reroutesField = value;
                    this.RaisePropertyChanged("reroutes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=11)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Route> routes {
            get {
                return this.routesField;
            }
            set {
                if ((object.ReferenceEquals(this.routesField, value) != true)) {
                    this.routesField = value;
                    this.RaisePropertyChanged("routes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=12)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Shape> shapes {
            get {
                return this.shapesField;
            }
            set {
                if ((object.ReferenceEquals(this.shapesField, value) != true)) {
                    this.shapesField = value;
                    this.RaisePropertyChanged("shapes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=13)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.StopTime> stop_times {
            get {
                return this.stop_timesField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_timesField, value) != true)) {
                    this.stop_timesField = value;
                    this.RaisePropertyChanged("stop_times");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=14)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Stop> stops {
            get {
                return this.stopsField;
            }
            set {
                if ((object.ReferenceEquals(this.stopsField, value) != true)) {
                    this.stopsField = value;
                    this.RaisePropertyChanged("stops");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=15)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Trip> trips {
            get {
                return this.tripsField;
            }
            set {
                if ((object.ReferenceEquals(this.tripsField, value) != true)) {
                    this.tripsField = value;
                    this.RaisePropertyChanged("trips");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=16)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.vehicle> vehicles {
            get {
                return this.vehiclesField;
            }
            set {
                if ((object.ReferenceEquals(this.vehiclesField, value) != true)) {
                    this.vehiclesField = value;
                    this.RaisePropertyChanged("vehicles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Status", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Status : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int codeField;
        
        private string msgField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int code {
            get {
                return this.codeField;
            }
            set {
                if ((this.codeField.Equals(value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msg {
            get {
                return this.msgField;
            }
            set {
                if ((object.ReferenceEquals(this.msgField, value) != true)) {
                    this.msgField = value;
                    this.RaisePropertyChanged("msg");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="rqst", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class rqst : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string methodField;
        
        private LiveTileScheduledTaskAgent.MTDService.@params paramsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string method {
            get {
                return this.methodField;
            }
            set {
                if ((object.ReferenceEquals(this.methodField, value) != true)) {
                    this.methodField = value;
                    this.RaisePropertyChanged("method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.@params @params {
            get {
                return this.paramsField;
            }
            set {
                if ((object.ReferenceEquals(this.paramsField, value) != true)) {
                    this.paramsField = value;
                    this.RaisePropertyChanged("params");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalendarDate", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class CalendarDate : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string dateField;
        
        private string service_idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string date {
            get {
                return this.dateField;
            }
            set {
                if ((object.ReferenceEquals(this.dateField, value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string service_id {
            get {
                return this.service_idField;
            }
            set {
                if ((object.ReferenceEquals(this.service_idField, value) != true)) {
                    this.service_idField = value;
                    this.RaisePropertyChanged("service_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageDay", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class UsageDay : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string dateField;
        
        private decimal callsField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.UsageVersion> versionsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string date {
            get {
                return this.dateField;
            }
            set {
                if ((object.ReferenceEquals(this.dateField, value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public decimal calls {
            get {
                return this.callsField;
            }
            set {
                if ((this.callsField.Equals(value) != true)) {
                    this.callsField = value;
                    this.RaisePropertyChanged("calls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.UsageVersion> versions {
            get {
                return this.versionsField;
            }
            set {
                if ((object.ReferenceEquals(this.versionsField, value) != true)) {
                    this.versionsField = value;
                    this.RaisePropertyChanged("versions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="departure", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class departure : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string stop_idField;
        
        private string headsignField;
        
        private LiveTileScheduledTaskAgent.MTDService.Route routeField;
        
        private LiveTileScheduledTaskAgent.MTDService.Trip tripField;
        
        private string vehicle_idField;
        
        private LiveTileScheduledTaskAgent.MTDService.BusStopReference originField;
        
        private LiveTileScheduledTaskAgent.MTDService.BusStopReference destinationField;
        
        private bool is_monitoredField;
        
        private bool is_scheduledField;
        
        private bool is_istopField;
        
        private string scheduledField;
        
        private string expectedField;
        
        private int expected_minsField;
        
        private LiveTileScheduledTaskAgent.MTDService.Location locationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string headsign {
            get {
                return this.headsignField;
            }
            set {
                if ((object.ReferenceEquals(this.headsignField, value) != true)) {
                    this.headsignField = value;
                    this.RaisePropertyChanged("headsign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public LiveTileScheduledTaskAgent.MTDService.Route route {
            get {
                return this.routeField;
            }
            set {
                if ((object.ReferenceEquals(this.routeField, value) != true)) {
                    this.routeField = value;
                    this.RaisePropertyChanged("route");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public LiveTileScheduledTaskAgent.MTDService.Trip trip {
            get {
                return this.tripField;
            }
            set {
                if ((object.ReferenceEquals(this.tripField, value) != true)) {
                    this.tripField = value;
                    this.RaisePropertyChanged("trip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string vehicle_id {
            get {
                return this.vehicle_idField;
            }
            set {
                if ((object.ReferenceEquals(this.vehicle_idField, value) != true)) {
                    this.vehicle_idField = value;
                    this.RaisePropertyChanged("vehicle_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public LiveTileScheduledTaskAgent.MTDService.BusStopReference origin {
            get {
                return this.originField;
            }
            set {
                if ((object.ReferenceEquals(this.originField, value) != true)) {
                    this.originField = value;
                    this.RaisePropertyChanged("origin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public LiveTileScheduledTaskAgent.MTDService.BusStopReference destination {
            get {
                return this.destinationField;
            }
            set {
                if ((object.ReferenceEquals(this.destinationField, value) != true)) {
                    this.destinationField = value;
                    this.RaisePropertyChanged("destination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public bool is_monitored {
            get {
                return this.is_monitoredField;
            }
            set {
                if ((this.is_monitoredField.Equals(value) != true)) {
                    this.is_monitoredField = value;
                    this.RaisePropertyChanged("is_monitored");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=8)]
        public bool is_scheduled {
            get {
                return this.is_scheduledField;
            }
            set {
                if ((this.is_scheduledField.Equals(value) != true)) {
                    this.is_scheduledField = value;
                    this.RaisePropertyChanged("is_scheduled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=9)]
        public bool is_istop {
            get {
                return this.is_istopField;
            }
            set {
                if ((this.is_istopField.Equals(value) != true)) {
                    this.is_istopField = value;
                    this.RaisePropertyChanged("is_istop");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=10)]
        public string scheduled {
            get {
                return this.scheduledField;
            }
            set {
                if ((object.ReferenceEquals(this.scheduledField, value) != true)) {
                    this.scheduledField = value;
                    this.RaisePropertyChanged("scheduled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=11)]
        public string expected {
            get {
                return this.expectedField;
            }
            set {
                if ((object.ReferenceEquals(this.expectedField, value) != true)) {
                    this.expectedField = value;
                    this.RaisePropertyChanged("expected");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=12)]
        public int expected_mins {
            get {
                return this.expected_minsField;
            }
            set {
                if ((this.expected_minsField.Equals(value) != true)) {
                    this.expected_minsField = value;
                    this.RaisePropertyChanged("expected_mins");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=13)]
        public LiveTileScheduledTaskAgent.MTDService.Location location {
            get {
                return this.locationField;
            }
            set {
                if ((object.ReferenceEquals(this.locationField, value) != true)) {
                    this.locationField = value;
                    this.RaisePropertyChanged("location");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Itinerary", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api.TripPlanner")]
    public partial class Itinerary : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string start_timeField;
        
        private string end_timeField;
        
        private int travel_timeField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Leg> legsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string start_time {
            get {
                return this.start_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.start_timeField, value) != true)) {
                    this.start_timeField = value;
                    this.RaisePropertyChanged("start_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string end_time {
            get {
                return this.end_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.end_timeField, value) != true)) {
                    this.end_timeField = value;
                    this.RaisePropertyChanged("end_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public int travel_time {
            get {
                return this.travel_timeField;
            }
            set {
                if ((this.travel_timeField.Equals(value) != true)) {
                    this.travel_timeField = value;
                    this.RaisePropertyChanged("travel_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Leg> legs {
            get {
                return this.legsField;
            }
            set {
                if ((object.ReferenceEquals(this.legsField, value) != true)) {
                    this.legsField = value;
                    this.RaisePropertyChanged("legs");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Reroute", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Reroute : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string start_dateField;
        
        private string end_dateField;
        
        private string messageField;
        
        private string descriptionField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Route> affected_routesField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string start_date {
            get {
                return this.start_dateField;
            }
            set {
                if ((object.ReferenceEquals(this.start_dateField, value) != true)) {
                    this.start_dateField = value;
                    this.RaisePropertyChanged("start_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string end_date {
            get {
                return this.end_dateField;
            }
            set {
                if ((object.ReferenceEquals(this.end_dateField, value) != true)) {
                    this.end_dateField = value;
                    this.RaisePropertyChanged("end_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Route> affected_routes {
            get {
                return this.affected_routesField;
            }
            set {
                if ((object.ReferenceEquals(this.affected_routesField, value) != true)) {
                    this.affected_routesField = value;
                    this.RaisePropertyChanged("affected_routes");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Route", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Route : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string route_colorField;
        
        private string route_idField;
        
        private string route_long_nameField;
        
        private string route_short_nameField;
        
        private string route_text_colorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string route_color {
            get {
                return this.route_colorField;
            }
            set {
                if ((object.ReferenceEquals(this.route_colorField, value) != true)) {
                    this.route_colorField = value;
                    this.RaisePropertyChanged("route_color");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string route_id {
            get {
                return this.route_idField;
            }
            set {
                if ((object.ReferenceEquals(this.route_idField, value) != true)) {
                    this.route_idField = value;
                    this.RaisePropertyChanged("route_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string route_long_name {
            get {
                return this.route_long_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.route_long_nameField, value) != true)) {
                    this.route_long_nameField = value;
                    this.RaisePropertyChanged("route_long_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string route_short_name {
            get {
                return this.route_short_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.route_short_nameField, value) != true)) {
                    this.route_short_nameField = value;
                    this.RaisePropertyChanged("route_short_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string route_text_color {
            get {
                return this.route_text_colorField;
            }
            set {
                if ((object.ReferenceEquals(this.route_text_colorField, value) != true)) {
                    this.route_text_colorField = value;
                    this.RaisePropertyChanged("route_text_color");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Shape", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Shape : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal shape_dist_traveledField;
        
        private decimal shape_pt_latField;
        
        private decimal shape_pt_lonField;
        
        private int shape_pt_sequenceField;
        
        private string stop_idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal shape_dist_traveled {
            get {
                return this.shape_dist_traveledField;
            }
            set {
                if ((this.shape_dist_traveledField.Equals(value) != true)) {
                    this.shape_dist_traveledField = value;
                    this.RaisePropertyChanged("shape_dist_traveled");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal shape_pt_lat {
            get {
                return this.shape_pt_latField;
            }
            set {
                if ((this.shape_pt_latField.Equals(value) != true)) {
                    this.shape_pt_latField = value;
                    this.RaisePropertyChanged("shape_pt_lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal shape_pt_lon {
            get {
                return this.shape_pt_lonField;
            }
            set {
                if ((this.shape_pt_lonField.Equals(value) != true)) {
                    this.shape_pt_lonField = value;
                    this.RaisePropertyChanged("shape_pt_lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int shape_pt_sequence {
            get {
                return this.shape_pt_sequenceField;
            }
            set {
                if ((this.shape_pt_sequenceField.Equals(value) != true)) {
                    this.shape_pt_sequenceField = value;
                    this.RaisePropertyChanged("shape_pt_sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StopTime", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class StopTime : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string arrival_timeField;
        
        private string departure_timeField;
        
        private string stop_sequenceField;
        
        private string stop_idField;
        
        private LiveTileScheduledTaskAgent.MTDService.StopPoint stop_pointField;
        
        private LiveTileScheduledTaskAgent.MTDService.Trip tripField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string arrival_time {
            get {
                return this.arrival_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.arrival_timeField, value) != true)) {
                    this.arrival_timeField = value;
                    this.RaisePropertyChanged("arrival_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string departure_time {
            get {
                return this.departure_timeField;
            }
            set {
                if ((object.ReferenceEquals(this.departure_timeField, value) != true)) {
                    this.departure_timeField = value;
                    this.RaisePropertyChanged("departure_time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_sequence {
            get {
                return this.stop_sequenceField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_sequenceField, value) != true)) {
                    this.stop_sequenceField = value;
                    this.RaisePropertyChanged("stop_sequence");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public LiveTileScheduledTaskAgent.MTDService.StopPoint stop_point {
            get {
                return this.stop_pointField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_pointField, value) != true)) {
                    this.stop_pointField = value;
                    this.RaisePropertyChanged("stop_point");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=5)]
        public LiveTileScheduledTaskAgent.MTDService.Trip trip {
            get {
                return this.tripField;
            }
            set {
                if ((object.ReferenceEquals(this.tripField, value) != true)) {
                    this.tripField = value;
                    this.RaisePropertyChanged("trip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Stop", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Stop : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string stop_idField;
        
        private string stop_nameField;
        
        private string codeField;
        
        private decimal distanceField;
        
        private decimal percent_matchField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.StopPoint> stop_pointsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_name {
            get {
                return this.stop_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_nameField, value) != true)) {
                    this.stop_nameField = value;
                    this.RaisePropertyChanged("stop_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=3)]
        public decimal distance {
            get {
                return this.distanceField;
            }
            set {
                if ((this.distanceField.Equals(value) != true)) {
                    this.distanceField = value;
                    this.RaisePropertyChanged("distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=4)]
        public decimal percent_match {
            get {
                return this.percent_matchField;
            }
            set {
                if ((this.percent_matchField.Equals(value) != true)) {
                    this.percent_matchField = value;
                    this.RaisePropertyChanged("percent_match");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.StopPoint> stop_points {
            get {
                return this.stop_pointsField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_pointsField, value) != true)) {
                    this.stop_pointsField = value;
                    this.RaisePropertyChanged("stop_points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Trip", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Trip : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string trip_idField;
        
        private string trip_headsignField;
        
        private string route_idField;
        
        private string block_idField;
        
        private string directionField;
        
        private string service_idField;
        
        private string shape_idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string trip_id {
            get {
                return this.trip_idField;
            }
            set {
                if ((object.ReferenceEquals(this.trip_idField, value) != true)) {
                    this.trip_idField = value;
                    this.RaisePropertyChanged("trip_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public string trip_headsign {
            get {
                return this.trip_headsignField;
            }
            set {
                if ((object.ReferenceEquals(this.trip_headsignField, value) != true)) {
                    this.trip_headsignField = value;
                    this.RaisePropertyChanged("trip_headsign");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public string route_id {
            get {
                return this.route_idField;
            }
            set {
                if ((object.ReferenceEquals(this.route_idField, value) != true)) {
                    this.route_idField = value;
                    this.RaisePropertyChanged("route_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string block_id {
            get {
                return this.block_idField;
            }
            set {
                if ((object.ReferenceEquals(this.block_idField, value) != true)) {
                    this.block_idField = value;
                    this.RaisePropertyChanged("block_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string direction {
            get {
                return this.directionField;
            }
            set {
                if ((object.ReferenceEquals(this.directionField, value) != true)) {
                    this.directionField = value;
                    this.RaisePropertyChanged("direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string service_id {
            get {
                return this.service_idField;
            }
            set {
                if ((object.ReferenceEquals(this.service_idField, value) != true)) {
                    this.service_idField = value;
                    this.RaisePropertyChanged("service_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string shape_id {
            get {
                return this.shape_idField;
            }
            set {
                if ((object.ReferenceEquals(this.shape_idField, value) != true)) {
                    this.shape_idField = value;
                    this.RaisePropertyChanged("shape_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="vehicle", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class vehicle : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string vehicle_idField;
        
        private LiveTileScheduledTaskAgent.MTDService.Trip tripField;
        
        private LiveTileScheduledTaskAgent.MTDService.Location locationField;
        
        private string previous_stop_idField;
        
        private string next_stop_idField;
        
        private string origin_stop_idField;
        
        private string destination_stop_idField;
        
        private string last_updatedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vehicle_id {
            get {
                return this.vehicle_idField;
            }
            set {
                if ((object.ReferenceEquals(this.vehicle_idField, value) != true)) {
                    this.vehicle_idField = value;
                    this.RaisePropertyChanged("vehicle_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public LiveTileScheduledTaskAgent.MTDService.Trip trip {
            get {
                return this.tripField;
            }
            set {
                if ((object.ReferenceEquals(this.tripField, value) != true)) {
                    this.tripField = value;
                    this.RaisePropertyChanged("trip");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public LiveTileScheduledTaskAgent.MTDService.Location location {
            get {
                return this.locationField;
            }
            set {
                if ((object.ReferenceEquals(this.locationField, value) != true)) {
                    this.locationField = value;
                    this.RaisePropertyChanged("location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string previous_stop_id {
            get {
                return this.previous_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.previous_stop_idField, value) != true)) {
                    this.previous_stop_idField = value;
                    this.RaisePropertyChanged("previous_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string next_stop_id {
            get {
                return this.next_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.next_stop_idField, value) != true)) {
                    this.next_stop_idField = value;
                    this.RaisePropertyChanged("next_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string origin_stop_id {
            get {
                return this.origin_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.origin_stop_idField, value) != true)) {
                    this.origin_stop_idField = value;
                    this.RaisePropertyChanged("origin_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=6)]
        public string destination_stop_id {
            get {
                return this.destination_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.destination_stop_idField, value) != true)) {
                    this.destination_stop_idField = value;
                    this.RaisePropertyChanged("destination_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=7)]
        public string last_updated {
            get {
                return this.last_updatedField;
            }
            set {
                if ((object.ReferenceEquals(this.last_updatedField, value) != true)) {
                    this.last_updatedField = value;
                    this.RaisePropertyChanged("last_updated");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="params", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class @params : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string arrive_departField;
        
        private string begin_stop_idField;
        
        private string block_idField;
        
        private string changeset_idField;
        
        private int countField;
        
        private string dateField;
        
        private decimal destination_latField;
        
        private decimal destination_lonField;
        
        private string destination_stop_idField;
        
        private string end_dateField;
        
        private string end_stop_idField;
        
        private decimal latField;
        
        private decimal lonField;
        
        private decimal max_walkField;
        
        private string methodField;
        
        private string minimizeField;
        
        private decimal origin_latField;
        
        private decimal origin_lonField;
        
        private string origin_stop_idField;
        
        private int ptField;
        
        private string queryField;
        
        private string route_idField;
        
        private string service_idField;
        
        private string shape_idField;
        
        private string start_dateField;
        
        private string stop_idField;
        
        private string timeField;
        
        private string trip_idField;
        
        private string vehicle_idField;
        
        private string versionField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string arrive_depart {
            get {
                return this.arrive_departField;
            }
            set {
                if ((object.ReferenceEquals(this.arrive_departField, value) != true)) {
                    this.arrive_departField = value;
                    this.RaisePropertyChanged("arrive_depart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string begin_stop_id {
            get {
                return this.begin_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.begin_stop_idField, value) != true)) {
                    this.begin_stop_idField = value;
                    this.RaisePropertyChanged("begin_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string block_id {
            get {
                return this.block_idField;
            }
            set {
                if ((object.ReferenceEquals(this.block_idField, value) != true)) {
                    this.block_idField = value;
                    this.RaisePropertyChanged("block_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string changeset_id {
            get {
                return this.changeset_idField;
            }
            set {
                if ((object.ReferenceEquals(this.changeset_idField, value) != true)) {
                    this.changeset_idField = value;
                    this.RaisePropertyChanged("changeset_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int count {
            get {
                return this.countField;
            }
            set {
                if ((this.countField.Equals(value) != true)) {
                    this.countField = value;
                    this.RaisePropertyChanged("count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string date {
            get {
                return this.dateField;
            }
            set {
                if ((object.ReferenceEquals(this.dateField, value) != true)) {
                    this.dateField = value;
                    this.RaisePropertyChanged("date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal destination_lat {
            get {
                return this.destination_latField;
            }
            set {
                if ((this.destination_latField.Equals(value) != true)) {
                    this.destination_latField = value;
                    this.RaisePropertyChanged("destination_lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal destination_lon {
            get {
                return this.destination_lonField;
            }
            set {
                if ((this.destination_lonField.Equals(value) != true)) {
                    this.destination_lonField = value;
                    this.RaisePropertyChanged("destination_lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string destination_stop_id {
            get {
                return this.destination_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.destination_stop_idField, value) != true)) {
                    this.destination_stop_idField = value;
                    this.RaisePropertyChanged("destination_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string end_date {
            get {
                return this.end_dateField;
            }
            set {
                if ((object.ReferenceEquals(this.end_dateField, value) != true)) {
                    this.end_dateField = value;
                    this.RaisePropertyChanged("end_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string end_stop_id {
            get {
                return this.end_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.end_stop_idField, value) != true)) {
                    this.end_stop_idField = value;
                    this.RaisePropertyChanged("end_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal lat {
            get {
                return this.latField;
            }
            set {
                if ((this.latField.Equals(value) != true)) {
                    this.latField = value;
                    this.RaisePropertyChanged("lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal lon {
            get {
                return this.lonField;
            }
            set {
                if ((this.lonField.Equals(value) != true)) {
                    this.lonField = value;
                    this.RaisePropertyChanged("lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal max_walk {
            get {
                return this.max_walkField;
            }
            set {
                if ((this.max_walkField.Equals(value) != true)) {
                    this.max_walkField = value;
                    this.RaisePropertyChanged("max_walk");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string method {
            get {
                return this.methodField;
            }
            set {
                if ((object.ReferenceEquals(this.methodField, value) != true)) {
                    this.methodField = value;
                    this.RaisePropertyChanged("method");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string minimize {
            get {
                return this.minimizeField;
            }
            set {
                if ((object.ReferenceEquals(this.minimizeField, value) != true)) {
                    this.minimizeField = value;
                    this.RaisePropertyChanged("minimize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal origin_lat {
            get {
                return this.origin_latField;
            }
            set {
                if ((this.origin_latField.Equals(value) != true)) {
                    this.origin_latField = value;
                    this.RaisePropertyChanged("origin_lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal origin_lon {
            get {
                return this.origin_lonField;
            }
            set {
                if ((this.origin_lonField.Equals(value) != true)) {
                    this.origin_lonField = value;
                    this.RaisePropertyChanged("origin_lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string origin_stop_id {
            get {
                return this.origin_stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.origin_stop_idField, value) != true)) {
                    this.origin_stop_idField = value;
                    this.RaisePropertyChanged("origin_stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int pt {
            get {
                return this.ptField;
            }
            set {
                if ((this.ptField.Equals(value) != true)) {
                    this.ptField = value;
                    this.RaisePropertyChanged("pt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string query {
            get {
                return this.queryField;
            }
            set {
                if ((object.ReferenceEquals(this.queryField, value) != true)) {
                    this.queryField = value;
                    this.RaisePropertyChanged("query");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string route_id {
            get {
                return this.route_idField;
            }
            set {
                if ((object.ReferenceEquals(this.route_idField, value) != true)) {
                    this.route_idField = value;
                    this.RaisePropertyChanged("route_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string service_id {
            get {
                return this.service_idField;
            }
            set {
                if ((object.ReferenceEquals(this.service_idField, value) != true)) {
                    this.service_idField = value;
                    this.RaisePropertyChanged("service_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string shape_id {
            get {
                return this.shape_idField;
            }
            set {
                if ((object.ReferenceEquals(this.shape_idField, value) != true)) {
                    this.shape_idField = value;
                    this.RaisePropertyChanged("shape_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string start_date {
            get {
                return this.start_dateField;
            }
            set {
                if ((object.ReferenceEquals(this.start_dateField, value) != true)) {
                    this.start_dateField = value;
                    this.RaisePropertyChanged("start_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string trip_id {
            get {
                return this.trip_idField;
            }
            set {
                if ((object.ReferenceEquals(this.trip_idField, value) != true)) {
                    this.trip_idField = value;
                    this.RaisePropertyChanged("trip_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string vehicle_id {
            get {
                return this.vehicle_idField;
            }
            set {
                if ((object.ReferenceEquals(this.vehicle_idField, value) != true)) {
                    this.vehicle_idField = value;
                    this.RaisePropertyChanged("vehicle_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string version {
            get {
                return this.versionField;
            }
            set {
                if ((object.ReferenceEquals(this.versionField, value) != true)) {
                    this.versionField = value;
                    this.RaisePropertyChanged("version");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageVersion", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class UsageVersion : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string numberField;
        
        private decimal callsField;
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.UsageMethod> methodsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string number {
            get {
                return this.numberField;
            }
            set {
                if ((object.ReferenceEquals(this.numberField, value) != true)) {
                    this.numberField = value;
                    this.RaisePropertyChanged("number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public decimal calls {
            get {
                return this.callsField;
            }
            set {
                if ((this.callsField.Equals(value) != true)) {
                    this.callsField = value;
                    this.RaisePropertyChanged("calls");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.UsageMethod> methods {
            get {
                return this.methodsField;
            }
            set {
                if ((object.ReferenceEquals(this.methodsField, value) != true)) {
                    this.methodsField = value;
                    this.RaisePropertyChanged("methods");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UsageMethod", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class UsageMethod : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private decimal callsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public decimal calls {
            get {
                return this.callsField;
            }
            set {
                if ((this.callsField.Equals(value) != true)) {
                    this.callsField = value;
                    this.RaisePropertyChanged("calls");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusStopReference", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class BusStopReference : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string stop_idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class Location : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal latField;
        
        private decimal lonField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal lat {
            get {
                return this.latField;
            }
            set {
                if ((this.latField.Equals(value) != true)) {
                    this.latField = value;
                    this.RaisePropertyChanged("lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal lon {
            get {
                return this.lonField;
            }
            set {
                if ((this.lonField.Equals(value) != true)) {
                    this.lonField = value;
                    this.RaisePropertyChanged("lon");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Leg", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api.TripPlanner")]
    public partial class Leg : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Service> servicesField;
        
        private string typeField;
        
        private LiveTileScheduledTaskAgent.MTDService.Walk walkField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public System.Collections.ObjectModel.ObservableCollection<LiveTileScheduledTaskAgent.MTDService.Service> services {
            get {
                return this.servicesField;
            }
            set {
                if ((object.ReferenceEquals(this.servicesField, value) != true)) {
                    this.servicesField = value;
                    this.RaisePropertyChanged("services");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                if ((object.ReferenceEquals(this.typeField, value) != true)) {
                    this.typeField = value;
                    this.RaisePropertyChanged("type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Walk walk {
            get {
                return this.walkField;
            }
            set {
                if ((object.ReferenceEquals(this.walkField, value) != true)) {
                    this.walkField = value;
                    this.RaisePropertyChanged("walk");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Walk", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api.TripPlanner")]
    public partial class Walk : object, System.ComponentModel.INotifyPropertyChanged {
        
        private LiveTileScheduledTaskAgent.MTDService.Endpoint beginField;
        
        private string directionField;
        
        private decimal distanceField;
        
        private LiveTileScheduledTaskAgent.MTDService.Endpoint endField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Endpoint begin {
            get {
                return this.beginField;
            }
            set {
                if ((object.ReferenceEquals(this.beginField, value) != true)) {
                    this.beginField = value;
                    this.RaisePropertyChanged("begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string direction {
            get {
                return this.directionField;
            }
            set {
                if ((object.ReferenceEquals(this.directionField, value) != true)) {
                    this.directionField = value;
                    this.RaisePropertyChanged("direction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal distance {
            get {
                return this.distanceField;
            }
            set {
                if ((this.distanceField.Equals(value) != true)) {
                    this.distanceField = value;
                    this.RaisePropertyChanged("distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Endpoint end {
            get {
                return this.endField;
            }
            set {
                if ((object.ReferenceEquals(this.endField, value) != true)) {
                    this.endField = value;
                    this.RaisePropertyChanged("end");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api.TripPlanner")]
    public partial class Service : object, System.ComponentModel.INotifyPropertyChanged {
        
        private LiveTileScheduledTaskAgent.MTDService.Endpoint beginField;
        
        private LiveTileScheduledTaskAgent.MTDService.Endpoint endField;
        
        private LiveTileScheduledTaskAgent.MTDService.Route routeField;
        
        private LiveTileScheduledTaskAgent.MTDService.Trip tripField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Endpoint begin {
            get {
                return this.beginField;
            }
            set {
                if ((object.ReferenceEquals(this.beginField, value) != true)) {
                    this.beginField = value;
                    this.RaisePropertyChanged("begin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Endpoint end {
            get {
                return this.endField;
            }
            set {
                if ((object.ReferenceEquals(this.endField, value) != true)) {
                    this.endField = value;
                    this.RaisePropertyChanged("end");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Route route {
            get {
                return this.routeField;
            }
            set {
                if ((object.ReferenceEquals(this.routeField, value) != true)) {
                    this.routeField = value;
                    this.RaisePropertyChanged("route");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public LiveTileScheduledTaskAgent.MTDService.Trip trip {
            get {
                return this.tripField;
            }
            set {
                if ((object.ReferenceEquals(this.tripField, value) != true)) {
                    this.tripField = value;
                    this.RaisePropertyChanged("trip");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Endpoint", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api.TripPlanner")]
    public partial class Endpoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal latField;
        
        private decimal lonField;
        
        private string nameField;
        
        private string stop_idField;
        
        private string timeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal lat {
            get {
                return this.latField;
            }
            set {
                if ((this.latField.Equals(value) != true)) {
                    this.latField = value;
                    this.RaisePropertyChanged("lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal lon {
            get {
                return this.lonField;
            }
            set {
                if ((this.lonField.Equals(value) != true)) {
                    this.lonField = value;
                    this.RaisePropertyChanged("lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public string time {
            get {
                return this.timeField;
            }
            set {
                if ((object.ReferenceEquals(this.timeField, value) != true)) {
                    this.timeField = value;
                    this.RaisePropertyChanged("time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StopPoint", Namespace="http://schemas.datacontract.org/2004/07/Cumtd.Developer.Api")]
    public partial class StopPoint : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string codeField;
        
        private decimal distanceField;
        
        private int rankField;
        
        private string stop_idField;
        
        private decimal stop_latField;
        
        private decimal stop_lonField;
        
        private string stop_nameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal distance {
            get {
                return this.distanceField;
            }
            set {
                if ((this.distanceField.Equals(value) != true)) {
                    this.distanceField = value;
                    this.RaisePropertyChanged("distance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public int rank {
            get {
                return this.rankField;
            }
            set {
                if ((this.rankField.Equals(value) != true)) {
                    this.rankField = value;
                    this.RaisePropertyChanged("rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_id {
            get {
                return this.stop_idField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_idField, value) != true)) {
                    this.stop_idField = value;
                    this.RaisePropertyChanged("stop_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal stop_lat {
            get {
                return this.stop_latField;
            }
            set {
                if ((this.stop_latField.Equals(value) != true)) {
                    this.stop_latField = value;
                    this.RaisePropertyChanged("stop_lat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false)]
        public decimal stop_lon {
            get {
                return this.stop_lonField;
            }
            set {
                if ((this.stop_lonField.Equals(value) != true)) {
                    this.stop_lonField = value;
                    this.RaisePropertyChanged("stop_lon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string stop_name {
            get {
                return this.stop_nameField;
            }
            set {
                if ((object.ReferenceEquals(this.stop_nameField, value) != true)) {
                    this.stop_nameField = value;
                    this.RaisePropertyChanged("stop_name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MTDService.IWsService")]
    public interface IWsService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetApiUsage", ReplyAction="http://tempuri.org/IWsService/GetApiUsageResponse")]
        System.IAsyncResult BeginGetApiUsage(string key, string version, string method, string start_date, string end_date, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetApiUsage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetCalendarDatesByDate", ReplyAction="http://tempuri.org/IWsService/GetCalendarDatesByDateResponse")]
        System.IAsyncResult BeginGetCalendarDatesByDate(string key, string date, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetCalendarDatesByDate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetCalendarDatesByService", ReplyAction="http://tempuri.org/IWsService/GetCalendarDatesByServiceResponse")]
        System.IAsyncResult BeginGetCalendarDatesByService(string key, string service_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetCalendarDatesByService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetDeparturesByStop", ReplyAction="http://tempuri.org/IWsService/GetDeparturesByStopResponse")]
        System.IAsyncResult BeginGetDeparturesByStop(string key, string stop_id, string route_id, int pt, int count, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetDeparturesByStop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetLastFeedUpdate", ReplyAction="http://tempuri.org/IWsService/GetLastFeedUpdateResponse")]
        System.IAsyncResult BeginGetLastFeedUpdate(string key, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetLastFeedUpdate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetPlannedTripsByLatLon", ReplyAction="http://tempuri.org/IWsService/GetPlannedTripsByLatLonResponse")]
        System.IAsyncResult BeginGetPlannedTripsByLatLon(string key, decimal origin_lat, decimal origin_lon, decimal destination_lat, decimal destination_lon, string date, string time, decimal max_walk, string minimize, string arrive_depart, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetPlannedTripsByLatLon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetPlannedTripsByStops", ReplyAction="http://tempuri.org/IWsService/GetPlannedTripsByStopsResponse")]
        System.IAsyncResult BeginGetPlannedTripsByStops(string key, string origin_stop_id, string destination_stop_id, string date, string time, decimal max_walk, string minimize, string arrive_depart, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetPlannedTripsByStops(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetReroutes", ReplyAction="http://tempuri.org/IWsService/GetReroutesResponse")]
        System.IAsyncResult BeginGetReroutes(string key, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetReroutes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetReroutesByRoute", ReplyAction="http://tempuri.org/IWsService/GetReroutesByRouteResponse")]
        System.IAsyncResult BeginGetReroutesByRoute(string key, string route_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetReroutesByRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetRoute", ReplyAction="http://tempuri.org/IWsService/GetRouteResponse")]
        System.IAsyncResult BeginGetRoute(string key, string route_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetRoutes", ReplyAction="http://tempuri.org/IWsService/GetRoutesResponse")]
        System.IAsyncResult BeginGetRoutes(string key, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetRoutes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetRoutesByStop", ReplyAction="http://tempuri.org/IWsService/GetRoutesByStopResponse")]
        System.IAsyncResult BeginGetRoutesByStop(string key, string stop_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetRoutesByStop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetShape", ReplyAction="http://tempuri.org/IWsService/GetShapeResponse")]
        System.IAsyncResult BeginGetShape(string key, string shape_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetShape(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetShapeBetweenStops", ReplyAction="http://tempuri.org/IWsService/GetShapeBetweenStopsResponse")]
        System.IAsyncResult BeginGetShapeBetweenStops(string key, string begin_stop_id, string end_stop_id, string shape_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetShapeBetweenStops(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetStop", ReplyAction="http://tempuri.org/IWsService/GetStopResponse")]
        System.IAsyncResult BeginGetStop(string key, string stop_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetStop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetStops", ReplyAction="http://tempuri.org/IWsService/GetStopsResponse")]
        System.IAsyncResult BeginGetStops(string key, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetStops(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetStopsBySearch", ReplyAction="http://tempuri.org/IWsService/GetStopsBySearchResponse")]
        System.IAsyncResult BeginGetStopsBySearch(string key, string query, int count, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopsBySearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetStopsByLatLon", ReplyAction="http://tempuri.org/IWsService/GetStopsByLatLonResponse")]
        System.IAsyncResult BeginGetStopsByLatLon(string key, decimal lat, decimal lon, int count, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopsByLatLon(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetStopTimesByTrip", ReplyAction="http://tempuri.org/IWsService/GetStopTimesByTripResponse")]
        System.IAsyncResult BeginGetStopTimesByTrip(string key, string trip_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopTimesByTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetStopTimesByStop", ReplyAction="http://tempuri.org/IWsService/GetStopTimesByStopResponse")]
        System.IAsyncResult BeginGetStopTimesByStop(string key, string stop_id, string route_id, string date, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopTimesByStop(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetTrip", ReplyAction="http://tempuri.org/IWsService/GetTripResponse")]
        System.IAsyncResult BeginGetTrip(string key, string trip_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetTrip(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetTripsByBlock", ReplyAction="http://tempuri.org/IWsService/GetTripsByBlockResponse")]
        System.IAsyncResult BeginGetTripsByBlock(string key, string block_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetTripsByBlock(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetTripsByRoute", ReplyAction="http://tempuri.org/IWsService/GetTripsByRouteResponse")]
        System.IAsyncResult BeginGetTripsByRoute(string key, string route_id, string changeset_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetTripsByRoute(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetVehicle", ReplyAction="http://tempuri.org/IWsService/GetVehicleResponse")]
        System.IAsyncResult BeginGetVehicle(string key, string vehicle_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetVehicle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetVehicles", ReplyAction="http://tempuri.org/IWsService/GetVehiclesResponse")]
        System.IAsyncResult BeginGetVehicles(string key, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetVehicles(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWsService/GetVehiclesByRoute", ReplyAction="http://tempuri.org/IWsService/GetVehiclesByRouteResponse")]
        System.IAsyncResult BeginGetVehiclesByRoute(string key, string route_id, System.AsyncCallback callback, object asyncState);
        
        LiveTileScheduledTaskAgent.MTDService.rsp EndGetVehiclesByRoute(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWsServiceChannel : LiveTileScheduledTaskAgent.MTDService.IWsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetApiUsageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetApiUsageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCalendarDatesByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCalendarDatesByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCalendarDatesByServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCalendarDatesByServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDeparturesByStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDeparturesByStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastFeedUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastFeedUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlannedTripsByLatLonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlannedTripsByLatLonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPlannedTripsByStopsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPlannedTripsByStopsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReroutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReroutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetReroutesByRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetReroutesByRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRoutesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoutesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRoutesByStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRoutesByStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetShapeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetShapeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetShapeBetweenStopsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetShapeBetweenStopsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopsBySearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopsBySearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopsByLatLonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopsByLatLonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopTimesByTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopTimesByTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStopTimesByStopCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStopTimesByStopCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTripCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTripCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTripsByBlockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTripsByBlockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTripsByRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTripsByRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVehicleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVehicleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVehiclesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVehiclesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVehiclesByRouteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVehiclesByRouteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public LiveTileScheduledTaskAgent.MTDService.rsp Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((LiveTileScheduledTaskAgent.MTDService.rsp)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WsServiceClient : System.ServiceModel.ClientBase<LiveTileScheduledTaskAgent.MTDService.IWsService>, LiveTileScheduledTaskAgent.MTDService.IWsService {
        
        private BeginOperationDelegate onBeginGetApiUsageDelegate;
        
        private EndOperationDelegate onEndGetApiUsageDelegate;
        
        private System.Threading.SendOrPostCallback onGetApiUsageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCalendarDatesByDateDelegate;
        
        private EndOperationDelegate onEndGetCalendarDatesByDateDelegate;
        
        private System.Threading.SendOrPostCallback onGetCalendarDatesByDateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCalendarDatesByServiceDelegate;
        
        private EndOperationDelegate onEndGetCalendarDatesByServiceDelegate;
        
        private System.Threading.SendOrPostCallback onGetCalendarDatesByServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDeparturesByStopDelegate;
        
        private EndOperationDelegate onEndGetDeparturesByStopDelegate;
        
        private System.Threading.SendOrPostCallback onGetDeparturesByStopCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastFeedUpdateDelegate;
        
        private EndOperationDelegate onEndGetLastFeedUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastFeedUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlannedTripsByLatLonDelegate;
        
        private EndOperationDelegate onEndGetPlannedTripsByLatLonDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlannedTripsByLatLonCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPlannedTripsByStopsDelegate;
        
        private EndOperationDelegate onEndGetPlannedTripsByStopsDelegate;
        
        private System.Threading.SendOrPostCallback onGetPlannedTripsByStopsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReroutesDelegate;
        
        private EndOperationDelegate onEndGetReroutesDelegate;
        
        private System.Threading.SendOrPostCallback onGetReroutesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetReroutesByRouteDelegate;
        
        private EndOperationDelegate onEndGetReroutesByRouteDelegate;
        
        private System.Threading.SendOrPostCallback onGetReroutesByRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRouteDelegate;
        
        private EndOperationDelegate onEndGetRouteDelegate;
        
        private System.Threading.SendOrPostCallback onGetRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoutesDelegate;
        
        private EndOperationDelegate onEndGetRoutesDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoutesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRoutesByStopDelegate;
        
        private EndOperationDelegate onEndGetRoutesByStopDelegate;
        
        private System.Threading.SendOrPostCallback onGetRoutesByStopCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetShapeDelegate;
        
        private EndOperationDelegate onEndGetShapeDelegate;
        
        private System.Threading.SendOrPostCallback onGetShapeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetShapeBetweenStopsDelegate;
        
        private EndOperationDelegate onEndGetShapeBetweenStopsDelegate;
        
        private System.Threading.SendOrPostCallback onGetShapeBetweenStopsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopDelegate;
        
        private EndOperationDelegate onEndGetStopDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopsDelegate;
        
        private EndOperationDelegate onEndGetStopsDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopsBySearchDelegate;
        
        private EndOperationDelegate onEndGetStopsBySearchDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopsBySearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopsByLatLonDelegate;
        
        private EndOperationDelegate onEndGetStopsByLatLonDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopsByLatLonCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopTimesByTripDelegate;
        
        private EndOperationDelegate onEndGetStopTimesByTripDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopTimesByTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetStopTimesByStopDelegate;
        
        private EndOperationDelegate onEndGetStopTimesByStopDelegate;
        
        private System.Threading.SendOrPostCallback onGetStopTimesByStopCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTripDelegate;
        
        private EndOperationDelegate onEndGetTripDelegate;
        
        private System.Threading.SendOrPostCallback onGetTripCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTripsByBlockDelegate;
        
        private EndOperationDelegate onEndGetTripsByBlockDelegate;
        
        private System.Threading.SendOrPostCallback onGetTripsByBlockCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTripsByRouteDelegate;
        
        private EndOperationDelegate onEndGetTripsByRouteDelegate;
        
        private System.Threading.SendOrPostCallback onGetTripsByRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVehicleDelegate;
        
        private EndOperationDelegate onEndGetVehicleDelegate;
        
        private System.Threading.SendOrPostCallback onGetVehicleCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVehiclesDelegate;
        
        private EndOperationDelegate onEndGetVehiclesDelegate;
        
        private System.Threading.SendOrPostCallback onGetVehiclesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVehiclesByRouteDelegate;
        
        private EndOperationDelegate onEndGetVehiclesByRouteDelegate;
        
        private System.Threading.SendOrPostCallback onGetVehiclesByRouteCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public WsServiceClient() {
        }
        
        public WsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetApiUsageCompletedEventArgs> GetApiUsageCompleted;
        
        public event System.EventHandler<GetCalendarDatesByDateCompletedEventArgs> GetCalendarDatesByDateCompleted;
        
        public event System.EventHandler<GetCalendarDatesByServiceCompletedEventArgs> GetCalendarDatesByServiceCompleted;
        
        public event System.EventHandler<GetDeparturesByStopCompletedEventArgs> GetDeparturesByStopCompleted;
        
        public event System.EventHandler<GetLastFeedUpdateCompletedEventArgs> GetLastFeedUpdateCompleted;
        
        public event System.EventHandler<GetPlannedTripsByLatLonCompletedEventArgs> GetPlannedTripsByLatLonCompleted;
        
        public event System.EventHandler<GetPlannedTripsByStopsCompletedEventArgs> GetPlannedTripsByStopsCompleted;
        
        public event System.EventHandler<GetReroutesCompletedEventArgs> GetReroutesCompleted;
        
        public event System.EventHandler<GetReroutesByRouteCompletedEventArgs> GetReroutesByRouteCompleted;
        
        public event System.EventHandler<GetRouteCompletedEventArgs> GetRouteCompleted;
        
        public event System.EventHandler<GetRoutesCompletedEventArgs> GetRoutesCompleted;
        
        public event System.EventHandler<GetRoutesByStopCompletedEventArgs> GetRoutesByStopCompleted;
        
        public event System.EventHandler<GetShapeCompletedEventArgs> GetShapeCompleted;
        
        public event System.EventHandler<GetShapeBetweenStopsCompletedEventArgs> GetShapeBetweenStopsCompleted;
        
        public event System.EventHandler<GetStopCompletedEventArgs> GetStopCompleted;
        
        public event System.EventHandler<GetStopsCompletedEventArgs> GetStopsCompleted;
        
        public event System.EventHandler<GetStopsBySearchCompletedEventArgs> GetStopsBySearchCompleted;
        
        public event System.EventHandler<GetStopsByLatLonCompletedEventArgs> GetStopsByLatLonCompleted;
        
        public event System.EventHandler<GetStopTimesByTripCompletedEventArgs> GetStopTimesByTripCompleted;
        
        public event System.EventHandler<GetStopTimesByStopCompletedEventArgs> GetStopTimesByStopCompleted;
        
        public event System.EventHandler<GetTripCompletedEventArgs> GetTripCompleted;
        
        public event System.EventHandler<GetTripsByBlockCompletedEventArgs> GetTripsByBlockCompleted;
        
        public event System.EventHandler<GetTripsByRouteCompletedEventArgs> GetTripsByRouteCompleted;
        
        public event System.EventHandler<GetVehicleCompletedEventArgs> GetVehicleCompleted;
        
        public event System.EventHandler<GetVehiclesCompletedEventArgs> GetVehiclesCompleted;
        
        public event System.EventHandler<GetVehiclesByRouteCompletedEventArgs> GetVehiclesByRouteCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetApiUsage(string key, string version, string method, string start_date, string end_date, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetApiUsage(key, version, method, start_date, end_date, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetApiUsage(System.IAsyncResult result) {
            return base.Channel.EndGetApiUsage(result);
        }
        
        private System.IAsyncResult OnBeginGetApiUsage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string version = ((string)(inValues[1]));
            string method = ((string)(inValues[2]));
            string start_date = ((string)(inValues[3]));
            string end_date = ((string)(inValues[4]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetApiUsage(key, version, method, start_date, end_date, callback, asyncState);
        }
        
        private object[] OnEndGetApiUsage(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetApiUsage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetApiUsageCompleted(object state) {
            if ((this.GetApiUsageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetApiUsageCompleted(this, new GetApiUsageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetApiUsageAsync(string key, string version, string method, string start_date, string end_date) {
            this.GetApiUsageAsync(key, version, method, start_date, end_date, null);
        }
        
        public void GetApiUsageAsync(string key, string version, string method, string start_date, string end_date, object userState) {
            if ((this.onBeginGetApiUsageDelegate == null)) {
                this.onBeginGetApiUsageDelegate = new BeginOperationDelegate(this.OnBeginGetApiUsage);
            }
            if ((this.onEndGetApiUsageDelegate == null)) {
                this.onEndGetApiUsageDelegate = new EndOperationDelegate(this.OnEndGetApiUsage);
            }
            if ((this.onGetApiUsageCompletedDelegate == null)) {
                this.onGetApiUsageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetApiUsageCompleted);
            }
            base.InvokeAsync(this.onBeginGetApiUsageDelegate, new object[] {
                        key,
                        version,
                        method,
                        start_date,
                        end_date}, this.onEndGetApiUsageDelegate, this.onGetApiUsageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetCalendarDatesByDate(string key, string date, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCalendarDatesByDate(key, date, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetCalendarDatesByDate(System.IAsyncResult result) {
            return base.Channel.EndGetCalendarDatesByDate(result);
        }
        
        private System.IAsyncResult OnBeginGetCalendarDatesByDate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string date = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetCalendarDatesByDate(key, date, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetCalendarDatesByDate(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetCalendarDatesByDate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCalendarDatesByDateCompleted(object state) {
            if ((this.GetCalendarDatesByDateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCalendarDatesByDateCompleted(this, new GetCalendarDatesByDateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCalendarDatesByDateAsync(string key, string date, string changeset_id) {
            this.GetCalendarDatesByDateAsync(key, date, changeset_id, null);
        }
        
        public void GetCalendarDatesByDateAsync(string key, string date, string changeset_id, object userState) {
            if ((this.onBeginGetCalendarDatesByDateDelegate == null)) {
                this.onBeginGetCalendarDatesByDateDelegate = new BeginOperationDelegate(this.OnBeginGetCalendarDatesByDate);
            }
            if ((this.onEndGetCalendarDatesByDateDelegate == null)) {
                this.onEndGetCalendarDatesByDateDelegate = new EndOperationDelegate(this.OnEndGetCalendarDatesByDate);
            }
            if ((this.onGetCalendarDatesByDateCompletedDelegate == null)) {
                this.onGetCalendarDatesByDateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCalendarDatesByDateCompleted);
            }
            base.InvokeAsync(this.onBeginGetCalendarDatesByDateDelegate, new object[] {
                        key,
                        date,
                        changeset_id}, this.onEndGetCalendarDatesByDateDelegate, this.onGetCalendarDatesByDateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetCalendarDatesByService(string key, string service_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCalendarDatesByService(key, service_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetCalendarDatesByService(System.IAsyncResult result) {
            return base.Channel.EndGetCalendarDatesByService(result);
        }
        
        private System.IAsyncResult OnBeginGetCalendarDatesByService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string service_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetCalendarDatesByService(key, service_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetCalendarDatesByService(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetCalendarDatesByService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCalendarDatesByServiceCompleted(object state) {
            if ((this.GetCalendarDatesByServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCalendarDatesByServiceCompleted(this, new GetCalendarDatesByServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCalendarDatesByServiceAsync(string key, string service_id, string changeset_id) {
            this.GetCalendarDatesByServiceAsync(key, service_id, changeset_id, null);
        }
        
        public void GetCalendarDatesByServiceAsync(string key, string service_id, string changeset_id, object userState) {
            if ((this.onBeginGetCalendarDatesByServiceDelegate == null)) {
                this.onBeginGetCalendarDatesByServiceDelegate = new BeginOperationDelegate(this.OnBeginGetCalendarDatesByService);
            }
            if ((this.onEndGetCalendarDatesByServiceDelegate == null)) {
                this.onEndGetCalendarDatesByServiceDelegate = new EndOperationDelegate(this.OnEndGetCalendarDatesByService);
            }
            if ((this.onGetCalendarDatesByServiceCompletedDelegate == null)) {
                this.onGetCalendarDatesByServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCalendarDatesByServiceCompleted);
            }
            base.InvokeAsync(this.onBeginGetCalendarDatesByServiceDelegate, new object[] {
                        key,
                        service_id,
                        changeset_id}, this.onEndGetCalendarDatesByServiceDelegate, this.onGetCalendarDatesByServiceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetDeparturesByStop(string key, string stop_id, string route_id, int pt, int count, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDeparturesByStop(key, stop_id, route_id, pt, count, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetDeparturesByStop(System.IAsyncResult result) {
            return base.Channel.EndGetDeparturesByStop(result);
        }
        
        private System.IAsyncResult OnBeginGetDeparturesByStop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string stop_id = ((string)(inValues[1]));
            string route_id = ((string)(inValues[2]));
            int pt = ((int)(inValues[3]));
            int count = ((int)(inValues[4]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetDeparturesByStop(key, stop_id, route_id, pt, count, callback, asyncState);
        }
        
        private object[] OnEndGetDeparturesByStop(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetDeparturesByStop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDeparturesByStopCompleted(object state) {
            if ((this.GetDeparturesByStopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDeparturesByStopCompleted(this, new GetDeparturesByStopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDeparturesByStopAsync(string key, string stop_id, string route_id, int pt, int count) {
            this.GetDeparturesByStopAsync(key, stop_id, route_id, pt, count, null);
        }
        
        public void GetDeparturesByStopAsync(string key, string stop_id, string route_id, int pt, int count, object userState) {
            if ((this.onBeginGetDeparturesByStopDelegate == null)) {
                this.onBeginGetDeparturesByStopDelegate = new BeginOperationDelegate(this.OnBeginGetDeparturesByStop);
            }
            if ((this.onEndGetDeparturesByStopDelegate == null)) {
                this.onEndGetDeparturesByStopDelegate = new EndOperationDelegate(this.OnEndGetDeparturesByStop);
            }
            if ((this.onGetDeparturesByStopCompletedDelegate == null)) {
                this.onGetDeparturesByStopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDeparturesByStopCompleted);
            }
            base.InvokeAsync(this.onBeginGetDeparturesByStopDelegate, new object[] {
                        key,
                        stop_id,
                        route_id,
                        pt,
                        count}, this.onEndGetDeparturesByStopDelegate, this.onGetDeparturesByStopCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetLastFeedUpdate(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastFeedUpdate(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetLastFeedUpdate(System.IAsyncResult result) {
            return base.Channel.EndGetLastFeedUpdate(result);
        }
        
        private System.IAsyncResult OnBeginGetLastFeedUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetLastFeedUpdate(key, callback, asyncState);
        }
        
        private object[] OnEndGetLastFeedUpdate(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetLastFeedUpdate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastFeedUpdateCompleted(object state) {
            if ((this.GetLastFeedUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastFeedUpdateCompleted(this, new GetLastFeedUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastFeedUpdateAsync(string key) {
            this.GetLastFeedUpdateAsync(key, null);
        }
        
        public void GetLastFeedUpdateAsync(string key, object userState) {
            if ((this.onBeginGetLastFeedUpdateDelegate == null)) {
                this.onBeginGetLastFeedUpdateDelegate = new BeginOperationDelegate(this.OnBeginGetLastFeedUpdate);
            }
            if ((this.onEndGetLastFeedUpdateDelegate == null)) {
                this.onEndGetLastFeedUpdateDelegate = new EndOperationDelegate(this.OnEndGetLastFeedUpdate);
            }
            if ((this.onGetLastFeedUpdateCompletedDelegate == null)) {
                this.onGetLastFeedUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastFeedUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastFeedUpdateDelegate, new object[] {
                        key}, this.onEndGetLastFeedUpdateDelegate, this.onGetLastFeedUpdateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetPlannedTripsByLatLon(string key, decimal origin_lat, decimal origin_lon, decimal destination_lat, decimal destination_lon, string date, string time, decimal max_walk, string minimize, string arrive_depart, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlannedTripsByLatLon(key, origin_lat, origin_lon, destination_lat, destination_lon, date, time, max_walk, minimize, arrive_depart, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetPlannedTripsByLatLon(System.IAsyncResult result) {
            return base.Channel.EndGetPlannedTripsByLatLon(result);
        }
        
        private System.IAsyncResult OnBeginGetPlannedTripsByLatLon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            decimal origin_lat = ((decimal)(inValues[1]));
            decimal origin_lon = ((decimal)(inValues[2]));
            decimal destination_lat = ((decimal)(inValues[3]));
            decimal destination_lon = ((decimal)(inValues[4]));
            string date = ((string)(inValues[5]));
            string time = ((string)(inValues[6]));
            decimal max_walk = ((decimal)(inValues[7]));
            string minimize = ((string)(inValues[8]));
            string arrive_depart = ((string)(inValues[9]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetPlannedTripsByLatLon(key, origin_lat, origin_lon, destination_lat, destination_lon, date, time, max_walk, minimize, arrive_depart, callback, asyncState);
        }
        
        private object[] OnEndGetPlannedTripsByLatLon(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetPlannedTripsByLatLon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlannedTripsByLatLonCompleted(object state) {
            if ((this.GetPlannedTripsByLatLonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlannedTripsByLatLonCompleted(this, new GetPlannedTripsByLatLonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlannedTripsByLatLonAsync(string key, decimal origin_lat, decimal origin_lon, decimal destination_lat, decimal destination_lon, string date, string time, decimal max_walk, string minimize, string arrive_depart) {
            this.GetPlannedTripsByLatLonAsync(key, origin_lat, origin_lon, destination_lat, destination_lon, date, time, max_walk, minimize, arrive_depart, null);
        }
        
        public void GetPlannedTripsByLatLonAsync(string key, decimal origin_lat, decimal origin_lon, decimal destination_lat, decimal destination_lon, string date, string time, decimal max_walk, string minimize, string arrive_depart, object userState) {
            if ((this.onBeginGetPlannedTripsByLatLonDelegate == null)) {
                this.onBeginGetPlannedTripsByLatLonDelegate = new BeginOperationDelegate(this.OnBeginGetPlannedTripsByLatLon);
            }
            if ((this.onEndGetPlannedTripsByLatLonDelegate == null)) {
                this.onEndGetPlannedTripsByLatLonDelegate = new EndOperationDelegate(this.OnEndGetPlannedTripsByLatLon);
            }
            if ((this.onGetPlannedTripsByLatLonCompletedDelegate == null)) {
                this.onGetPlannedTripsByLatLonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlannedTripsByLatLonCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlannedTripsByLatLonDelegate, new object[] {
                        key,
                        origin_lat,
                        origin_lon,
                        destination_lat,
                        destination_lon,
                        date,
                        time,
                        max_walk,
                        minimize,
                        arrive_depart}, this.onEndGetPlannedTripsByLatLonDelegate, this.onGetPlannedTripsByLatLonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetPlannedTripsByStops(string key, string origin_stop_id, string destination_stop_id, string date, string time, decimal max_walk, string minimize, string arrive_depart, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPlannedTripsByStops(key, origin_stop_id, destination_stop_id, date, time, max_walk, minimize, arrive_depart, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetPlannedTripsByStops(System.IAsyncResult result) {
            return base.Channel.EndGetPlannedTripsByStops(result);
        }
        
        private System.IAsyncResult OnBeginGetPlannedTripsByStops(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string origin_stop_id = ((string)(inValues[1]));
            string destination_stop_id = ((string)(inValues[2]));
            string date = ((string)(inValues[3]));
            string time = ((string)(inValues[4]));
            decimal max_walk = ((decimal)(inValues[5]));
            string minimize = ((string)(inValues[6]));
            string arrive_depart = ((string)(inValues[7]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetPlannedTripsByStops(key, origin_stop_id, destination_stop_id, date, time, max_walk, minimize, arrive_depart, callback, asyncState);
        }
        
        private object[] OnEndGetPlannedTripsByStops(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetPlannedTripsByStops(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPlannedTripsByStopsCompleted(object state) {
            if ((this.GetPlannedTripsByStopsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPlannedTripsByStopsCompleted(this, new GetPlannedTripsByStopsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPlannedTripsByStopsAsync(string key, string origin_stop_id, string destination_stop_id, string date, string time, decimal max_walk, string minimize, string arrive_depart) {
            this.GetPlannedTripsByStopsAsync(key, origin_stop_id, destination_stop_id, date, time, max_walk, minimize, arrive_depart, null);
        }
        
        public void GetPlannedTripsByStopsAsync(string key, string origin_stop_id, string destination_stop_id, string date, string time, decimal max_walk, string minimize, string arrive_depart, object userState) {
            if ((this.onBeginGetPlannedTripsByStopsDelegate == null)) {
                this.onBeginGetPlannedTripsByStopsDelegate = new BeginOperationDelegate(this.OnBeginGetPlannedTripsByStops);
            }
            if ((this.onEndGetPlannedTripsByStopsDelegate == null)) {
                this.onEndGetPlannedTripsByStopsDelegate = new EndOperationDelegate(this.OnEndGetPlannedTripsByStops);
            }
            if ((this.onGetPlannedTripsByStopsCompletedDelegate == null)) {
                this.onGetPlannedTripsByStopsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPlannedTripsByStopsCompleted);
            }
            base.InvokeAsync(this.onBeginGetPlannedTripsByStopsDelegate, new object[] {
                        key,
                        origin_stop_id,
                        destination_stop_id,
                        date,
                        time,
                        max_walk,
                        minimize,
                        arrive_depart}, this.onEndGetPlannedTripsByStopsDelegate, this.onGetPlannedTripsByStopsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetReroutes(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReroutes(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetReroutes(System.IAsyncResult result) {
            return base.Channel.EndGetReroutes(result);
        }
        
        private System.IAsyncResult OnBeginGetReroutes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetReroutes(key, callback, asyncState);
        }
        
        private object[] OnEndGetReroutes(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetReroutes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReroutesCompleted(object state) {
            if ((this.GetReroutesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReroutesCompleted(this, new GetReroutesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReroutesAsync(string key) {
            this.GetReroutesAsync(key, null);
        }
        
        public void GetReroutesAsync(string key, object userState) {
            if ((this.onBeginGetReroutesDelegate == null)) {
                this.onBeginGetReroutesDelegate = new BeginOperationDelegate(this.OnBeginGetReroutes);
            }
            if ((this.onEndGetReroutesDelegate == null)) {
                this.onEndGetReroutesDelegate = new EndOperationDelegate(this.OnEndGetReroutes);
            }
            if ((this.onGetReroutesCompletedDelegate == null)) {
                this.onGetReroutesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReroutesCompleted);
            }
            base.InvokeAsync(this.onBeginGetReroutesDelegate, new object[] {
                        key}, this.onEndGetReroutesDelegate, this.onGetReroutesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetReroutesByRoute(string key, string route_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetReroutesByRoute(key, route_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetReroutesByRoute(System.IAsyncResult result) {
            return base.Channel.EndGetReroutesByRoute(result);
        }
        
        private System.IAsyncResult OnBeginGetReroutesByRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string route_id = ((string)(inValues[1]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetReroutesByRoute(key, route_id, callback, asyncState);
        }
        
        private object[] OnEndGetReroutesByRoute(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetReroutesByRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetReroutesByRouteCompleted(object state) {
            if ((this.GetReroutesByRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetReroutesByRouteCompleted(this, new GetReroutesByRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetReroutesByRouteAsync(string key, string route_id) {
            this.GetReroutesByRouteAsync(key, route_id, null);
        }
        
        public void GetReroutesByRouteAsync(string key, string route_id, object userState) {
            if ((this.onBeginGetReroutesByRouteDelegate == null)) {
                this.onBeginGetReroutesByRouteDelegate = new BeginOperationDelegate(this.OnBeginGetReroutesByRoute);
            }
            if ((this.onEndGetReroutesByRouteDelegate == null)) {
                this.onEndGetReroutesByRouteDelegate = new EndOperationDelegate(this.OnEndGetReroutesByRoute);
            }
            if ((this.onGetReroutesByRouteCompletedDelegate == null)) {
                this.onGetReroutesByRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetReroutesByRouteCompleted);
            }
            base.InvokeAsync(this.onBeginGetReroutesByRouteDelegate, new object[] {
                        key,
                        route_id}, this.onEndGetReroutesByRouteDelegate, this.onGetReroutesByRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetRoute(string key, string route_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoute(key, route_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetRoute(System.IAsyncResult result) {
            return base.Channel.EndGetRoute(result);
        }
        
        private System.IAsyncResult OnBeginGetRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string route_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetRoute(key, route_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetRoute(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRouteCompleted(object state) {
            if ((this.GetRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRouteCompleted(this, new GetRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRouteAsync(string key, string route_id, string changeset_id) {
            this.GetRouteAsync(key, route_id, changeset_id, null);
        }
        
        public void GetRouteAsync(string key, string route_id, string changeset_id, object userState) {
            if ((this.onBeginGetRouteDelegate == null)) {
                this.onBeginGetRouteDelegate = new BeginOperationDelegate(this.OnBeginGetRoute);
            }
            if ((this.onEndGetRouteDelegate == null)) {
                this.onEndGetRouteDelegate = new EndOperationDelegate(this.OnEndGetRoute);
            }
            if ((this.onGetRouteCompletedDelegate == null)) {
                this.onGetRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRouteCompleted);
            }
            base.InvokeAsync(this.onBeginGetRouteDelegate, new object[] {
                        key,
                        route_id,
                        changeset_id}, this.onEndGetRouteDelegate, this.onGetRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetRoutes(string key, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoutes(key, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetRoutes(System.IAsyncResult result) {
            return base.Channel.EndGetRoutes(result);
        }
        
        private System.IAsyncResult OnBeginGetRoutes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string changeset_id = ((string)(inValues[1]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetRoutes(key, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetRoutes(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetRoutes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRoutesCompleted(object state) {
            if ((this.GetRoutesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoutesCompleted(this, new GetRoutesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoutesAsync(string key, string changeset_id) {
            this.GetRoutesAsync(key, changeset_id, null);
        }
        
        public void GetRoutesAsync(string key, string changeset_id, object userState) {
            if ((this.onBeginGetRoutesDelegate == null)) {
                this.onBeginGetRoutesDelegate = new BeginOperationDelegate(this.OnBeginGetRoutes);
            }
            if ((this.onEndGetRoutesDelegate == null)) {
                this.onEndGetRoutesDelegate = new EndOperationDelegate(this.OnEndGetRoutes);
            }
            if ((this.onGetRoutesCompletedDelegate == null)) {
                this.onGetRoutesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoutesCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoutesDelegate, new object[] {
                        key,
                        changeset_id}, this.onEndGetRoutesDelegate, this.onGetRoutesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetRoutesByStop(string key, string stop_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRoutesByStop(key, stop_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetRoutesByStop(System.IAsyncResult result) {
            return base.Channel.EndGetRoutesByStop(result);
        }
        
        private System.IAsyncResult OnBeginGetRoutesByStop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string stop_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetRoutesByStop(key, stop_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetRoutesByStop(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetRoutesByStop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRoutesByStopCompleted(object state) {
            if ((this.GetRoutesByStopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRoutesByStopCompleted(this, new GetRoutesByStopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRoutesByStopAsync(string key, string stop_id, string changeset_id) {
            this.GetRoutesByStopAsync(key, stop_id, changeset_id, null);
        }
        
        public void GetRoutesByStopAsync(string key, string stop_id, string changeset_id, object userState) {
            if ((this.onBeginGetRoutesByStopDelegate == null)) {
                this.onBeginGetRoutesByStopDelegate = new BeginOperationDelegate(this.OnBeginGetRoutesByStop);
            }
            if ((this.onEndGetRoutesByStopDelegate == null)) {
                this.onEndGetRoutesByStopDelegate = new EndOperationDelegate(this.OnEndGetRoutesByStop);
            }
            if ((this.onGetRoutesByStopCompletedDelegate == null)) {
                this.onGetRoutesByStopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRoutesByStopCompleted);
            }
            base.InvokeAsync(this.onBeginGetRoutesByStopDelegate, new object[] {
                        key,
                        stop_id,
                        changeset_id}, this.onEndGetRoutesByStopDelegate, this.onGetRoutesByStopCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetShape(string key, string shape_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetShape(key, shape_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetShape(System.IAsyncResult result) {
            return base.Channel.EndGetShape(result);
        }
        
        private System.IAsyncResult OnBeginGetShape(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string shape_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetShape(key, shape_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetShape(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetShape(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetShapeCompleted(object state) {
            if ((this.GetShapeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetShapeCompleted(this, new GetShapeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetShapeAsync(string key, string shape_id, string changeset_id) {
            this.GetShapeAsync(key, shape_id, changeset_id, null);
        }
        
        public void GetShapeAsync(string key, string shape_id, string changeset_id, object userState) {
            if ((this.onBeginGetShapeDelegate == null)) {
                this.onBeginGetShapeDelegate = new BeginOperationDelegate(this.OnBeginGetShape);
            }
            if ((this.onEndGetShapeDelegate == null)) {
                this.onEndGetShapeDelegate = new EndOperationDelegate(this.OnEndGetShape);
            }
            if ((this.onGetShapeCompletedDelegate == null)) {
                this.onGetShapeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetShapeCompleted);
            }
            base.InvokeAsync(this.onBeginGetShapeDelegate, new object[] {
                        key,
                        shape_id,
                        changeset_id}, this.onEndGetShapeDelegate, this.onGetShapeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetShapeBetweenStops(string key, string begin_stop_id, string end_stop_id, string shape_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetShapeBetweenStops(key, begin_stop_id, end_stop_id, shape_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetShapeBetweenStops(System.IAsyncResult result) {
            return base.Channel.EndGetShapeBetweenStops(result);
        }
        
        private System.IAsyncResult OnBeginGetShapeBetweenStops(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string begin_stop_id = ((string)(inValues[1]));
            string end_stop_id = ((string)(inValues[2]));
            string shape_id = ((string)(inValues[3]));
            string changeset_id = ((string)(inValues[4]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetShapeBetweenStops(key, begin_stop_id, end_stop_id, shape_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetShapeBetweenStops(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetShapeBetweenStops(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetShapeBetweenStopsCompleted(object state) {
            if ((this.GetShapeBetweenStopsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetShapeBetweenStopsCompleted(this, new GetShapeBetweenStopsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetShapeBetweenStopsAsync(string key, string begin_stop_id, string end_stop_id, string shape_id, string changeset_id) {
            this.GetShapeBetweenStopsAsync(key, begin_stop_id, end_stop_id, shape_id, changeset_id, null);
        }
        
        public void GetShapeBetweenStopsAsync(string key, string begin_stop_id, string end_stop_id, string shape_id, string changeset_id, object userState) {
            if ((this.onBeginGetShapeBetweenStopsDelegate == null)) {
                this.onBeginGetShapeBetweenStopsDelegate = new BeginOperationDelegate(this.OnBeginGetShapeBetweenStops);
            }
            if ((this.onEndGetShapeBetweenStopsDelegate == null)) {
                this.onEndGetShapeBetweenStopsDelegate = new EndOperationDelegate(this.OnEndGetShapeBetweenStops);
            }
            if ((this.onGetShapeBetweenStopsCompletedDelegate == null)) {
                this.onGetShapeBetweenStopsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetShapeBetweenStopsCompleted);
            }
            base.InvokeAsync(this.onBeginGetShapeBetweenStopsDelegate, new object[] {
                        key,
                        begin_stop_id,
                        end_stop_id,
                        shape_id,
                        changeset_id}, this.onEndGetShapeBetweenStopsDelegate, this.onGetShapeBetweenStopsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetStop(string key, string stop_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStop(key, stop_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetStop(System.IAsyncResult result) {
            return base.Channel.EndGetStop(result);
        }
        
        private System.IAsyncResult OnBeginGetStop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string stop_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetStop(key, stop_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetStop(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetStop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopCompleted(object state) {
            if ((this.GetStopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopCompleted(this, new GetStopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopAsync(string key, string stop_id, string changeset_id) {
            this.GetStopAsync(key, stop_id, changeset_id, null);
        }
        
        public void GetStopAsync(string key, string stop_id, string changeset_id, object userState) {
            if ((this.onBeginGetStopDelegate == null)) {
                this.onBeginGetStopDelegate = new BeginOperationDelegate(this.OnBeginGetStop);
            }
            if ((this.onEndGetStopDelegate == null)) {
                this.onEndGetStopDelegate = new EndOperationDelegate(this.OnEndGetStop);
            }
            if ((this.onGetStopCompletedDelegate == null)) {
                this.onGetStopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopDelegate, new object[] {
                        key,
                        stop_id,
                        changeset_id}, this.onEndGetStopDelegate, this.onGetStopCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetStops(string key, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStops(key, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetStops(System.IAsyncResult result) {
            return base.Channel.EndGetStops(result);
        }
        
        private System.IAsyncResult OnBeginGetStops(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string changeset_id = ((string)(inValues[1]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetStops(key, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetStops(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetStops(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopsCompleted(object state) {
            if ((this.GetStopsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopsCompleted(this, new GetStopsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopsAsync(string key, string changeset_id) {
            this.GetStopsAsync(key, changeset_id, null);
        }
        
        public void GetStopsAsync(string key, string changeset_id, object userState) {
            if ((this.onBeginGetStopsDelegate == null)) {
                this.onBeginGetStopsDelegate = new BeginOperationDelegate(this.OnBeginGetStops);
            }
            if ((this.onEndGetStopsDelegate == null)) {
                this.onEndGetStopsDelegate = new EndOperationDelegate(this.OnEndGetStops);
            }
            if ((this.onGetStopsCompletedDelegate == null)) {
                this.onGetStopsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopsCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopsDelegate, new object[] {
                        key,
                        changeset_id}, this.onEndGetStopsDelegate, this.onGetStopsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetStopsBySearch(string key, string query, int count, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStopsBySearch(key, query, count, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetStopsBySearch(System.IAsyncResult result) {
            return base.Channel.EndGetStopsBySearch(result);
        }
        
        private System.IAsyncResult OnBeginGetStopsBySearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string query = ((string)(inValues[1]));
            int count = ((int)(inValues[2]));
            string changeset_id = ((string)(inValues[3]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetStopsBySearch(key, query, count, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetStopsBySearch(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetStopsBySearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopsBySearchCompleted(object state) {
            if ((this.GetStopsBySearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopsBySearchCompleted(this, new GetStopsBySearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopsBySearchAsync(string key, string query, int count, string changeset_id) {
            this.GetStopsBySearchAsync(key, query, count, changeset_id, null);
        }
        
        public void GetStopsBySearchAsync(string key, string query, int count, string changeset_id, object userState) {
            if ((this.onBeginGetStopsBySearchDelegate == null)) {
                this.onBeginGetStopsBySearchDelegate = new BeginOperationDelegate(this.OnBeginGetStopsBySearch);
            }
            if ((this.onEndGetStopsBySearchDelegate == null)) {
                this.onEndGetStopsBySearchDelegate = new EndOperationDelegate(this.OnEndGetStopsBySearch);
            }
            if ((this.onGetStopsBySearchCompletedDelegate == null)) {
                this.onGetStopsBySearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopsBySearchCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopsBySearchDelegate, new object[] {
                        key,
                        query,
                        count,
                        changeset_id}, this.onEndGetStopsBySearchDelegate, this.onGetStopsBySearchCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetStopsByLatLon(string key, decimal lat, decimal lon, int count, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStopsByLatLon(key, lat, lon, count, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetStopsByLatLon(System.IAsyncResult result) {
            return base.Channel.EndGetStopsByLatLon(result);
        }
        
        private System.IAsyncResult OnBeginGetStopsByLatLon(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            decimal lat = ((decimal)(inValues[1]));
            decimal lon = ((decimal)(inValues[2]));
            int count = ((int)(inValues[3]));
            string changeset_id = ((string)(inValues[4]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetStopsByLatLon(key, lat, lon, count, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetStopsByLatLon(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetStopsByLatLon(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopsByLatLonCompleted(object state) {
            if ((this.GetStopsByLatLonCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopsByLatLonCompleted(this, new GetStopsByLatLonCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopsByLatLonAsync(string key, decimal lat, decimal lon, int count, string changeset_id) {
            this.GetStopsByLatLonAsync(key, lat, lon, count, changeset_id, null);
        }
        
        public void GetStopsByLatLonAsync(string key, decimal lat, decimal lon, int count, string changeset_id, object userState) {
            if ((this.onBeginGetStopsByLatLonDelegate == null)) {
                this.onBeginGetStopsByLatLonDelegate = new BeginOperationDelegate(this.OnBeginGetStopsByLatLon);
            }
            if ((this.onEndGetStopsByLatLonDelegate == null)) {
                this.onEndGetStopsByLatLonDelegate = new EndOperationDelegate(this.OnEndGetStopsByLatLon);
            }
            if ((this.onGetStopsByLatLonCompletedDelegate == null)) {
                this.onGetStopsByLatLonCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopsByLatLonCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopsByLatLonDelegate, new object[] {
                        key,
                        lat,
                        lon,
                        count,
                        changeset_id}, this.onEndGetStopsByLatLonDelegate, this.onGetStopsByLatLonCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetStopTimesByTrip(string key, string trip_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStopTimesByTrip(key, trip_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetStopTimesByTrip(System.IAsyncResult result) {
            return base.Channel.EndGetStopTimesByTrip(result);
        }
        
        private System.IAsyncResult OnBeginGetStopTimesByTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string trip_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetStopTimesByTrip(key, trip_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetStopTimesByTrip(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetStopTimesByTrip(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopTimesByTripCompleted(object state) {
            if ((this.GetStopTimesByTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopTimesByTripCompleted(this, new GetStopTimesByTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopTimesByTripAsync(string key, string trip_id, string changeset_id) {
            this.GetStopTimesByTripAsync(key, trip_id, changeset_id, null);
        }
        
        public void GetStopTimesByTripAsync(string key, string trip_id, string changeset_id, object userState) {
            if ((this.onBeginGetStopTimesByTripDelegate == null)) {
                this.onBeginGetStopTimesByTripDelegate = new BeginOperationDelegate(this.OnBeginGetStopTimesByTrip);
            }
            if ((this.onEndGetStopTimesByTripDelegate == null)) {
                this.onEndGetStopTimesByTripDelegate = new EndOperationDelegate(this.OnEndGetStopTimesByTrip);
            }
            if ((this.onGetStopTimesByTripCompletedDelegate == null)) {
                this.onGetStopTimesByTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopTimesByTripCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopTimesByTripDelegate, new object[] {
                        key,
                        trip_id,
                        changeset_id}, this.onEndGetStopTimesByTripDelegate, this.onGetStopTimesByTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetStopTimesByStop(string key, string stop_id, string route_id, string date, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStopTimesByStop(key, stop_id, route_id, date, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetStopTimesByStop(System.IAsyncResult result) {
            return base.Channel.EndGetStopTimesByStop(result);
        }
        
        private System.IAsyncResult OnBeginGetStopTimesByStop(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string stop_id = ((string)(inValues[1]));
            string route_id = ((string)(inValues[2]));
            string date = ((string)(inValues[3]));
            string changeset_id = ((string)(inValues[4]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetStopTimesByStop(key, stop_id, route_id, date, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetStopTimesByStop(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetStopTimesByStop(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStopTimesByStopCompleted(object state) {
            if ((this.GetStopTimesByStopCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStopTimesByStopCompleted(this, new GetStopTimesByStopCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStopTimesByStopAsync(string key, string stop_id, string route_id, string date, string changeset_id) {
            this.GetStopTimesByStopAsync(key, stop_id, route_id, date, changeset_id, null);
        }
        
        public void GetStopTimesByStopAsync(string key, string stop_id, string route_id, string date, string changeset_id, object userState) {
            if ((this.onBeginGetStopTimesByStopDelegate == null)) {
                this.onBeginGetStopTimesByStopDelegate = new BeginOperationDelegate(this.OnBeginGetStopTimesByStop);
            }
            if ((this.onEndGetStopTimesByStopDelegate == null)) {
                this.onEndGetStopTimesByStopDelegate = new EndOperationDelegate(this.OnEndGetStopTimesByStop);
            }
            if ((this.onGetStopTimesByStopCompletedDelegate == null)) {
                this.onGetStopTimesByStopCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStopTimesByStopCompleted);
            }
            base.InvokeAsync(this.onBeginGetStopTimesByStopDelegate, new object[] {
                        key,
                        stop_id,
                        route_id,
                        date,
                        changeset_id}, this.onEndGetStopTimesByStopDelegate, this.onGetStopTimesByStopCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetTrip(string key, string trip_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTrip(key, trip_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetTrip(System.IAsyncResult result) {
            return base.Channel.EndGetTrip(result);
        }
        
        private System.IAsyncResult OnBeginGetTrip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string trip_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetTrip(key, trip_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetTrip(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetTrip(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTripCompleted(object state) {
            if ((this.GetTripCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTripCompleted(this, new GetTripCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTripAsync(string key, string trip_id, string changeset_id) {
            this.GetTripAsync(key, trip_id, changeset_id, null);
        }
        
        public void GetTripAsync(string key, string trip_id, string changeset_id, object userState) {
            if ((this.onBeginGetTripDelegate == null)) {
                this.onBeginGetTripDelegate = new BeginOperationDelegate(this.OnBeginGetTrip);
            }
            if ((this.onEndGetTripDelegate == null)) {
                this.onEndGetTripDelegate = new EndOperationDelegate(this.OnEndGetTrip);
            }
            if ((this.onGetTripCompletedDelegate == null)) {
                this.onGetTripCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTripCompleted);
            }
            base.InvokeAsync(this.onBeginGetTripDelegate, new object[] {
                        key,
                        trip_id,
                        changeset_id}, this.onEndGetTripDelegate, this.onGetTripCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetTripsByBlock(string key, string block_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTripsByBlock(key, block_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetTripsByBlock(System.IAsyncResult result) {
            return base.Channel.EndGetTripsByBlock(result);
        }
        
        private System.IAsyncResult OnBeginGetTripsByBlock(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string block_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetTripsByBlock(key, block_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetTripsByBlock(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetTripsByBlock(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTripsByBlockCompleted(object state) {
            if ((this.GetTripsByBlockCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTripsByBlockCompleted(this, new GetTripsByBlockCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTripsByBlockAsync(string key, string block_id, string changeset_id) {
            this.GetTripsByBlockAsync(key, block_id, changeset_id, null);
        }
        
        public void GetTripsByBlockAsync(string key, string block_id, string changeset_id, object userState) {
            if ((this.onBeginGetTripsByBlockDelegate == null)) {
                this.onBeginGetTripsByBlockDelegate = new BeginOperationDelegate(this.OnBeginGetTripsByBlock);
            }
            if ((this.onEndGetTripsByBlockDelegate == null)) {
                this.onEndGetTripsByBlockDelegate = new EndOperationDelegate(this.OnEndGetTripsByBlock);
            }
            if ((this.onGetTripsByBlockCompletedDelegate == null)) {
                this.onGetTripsByBlockCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTripsByBlockCompleted);
            }
            base.InvokeAsync(this.onBeginGetTripsByBlockDelegate, new object[] {
                        key,
                        block_id,
                        changeset_id}, this.onEndGetTripsByBlockDelegate, this.onGetTripsByBlockCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetTripsByRoute(string key, string route_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTripsByRoute(key, route_id, changeset_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetTripsByRoute(System.IAsyncResult result) {
            return base.Channel.EndGetTripsByRoute(result);
        }
        
        private System.IAsyncResult OnBeginGetTripsByRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string route_id = ((string)(inValues[1]));
            string changeset_id = ((string)(inValues[2]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetTripsByRoute(key, route_id, changeset_id, callback, asyncState);
        }
        
        private object[] OnEndGetTripsByRoute(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetTripsByRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTripsByRouteCompleted(object state) {
            if ((this.GetTripsByRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTripsByRouteCompleted(this, new GetTripsByRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTripsByRouteAsync(string key, string route_id, string changeset_id) {
            this.GetTripsByRouteAsync(key, route_id, changeset_id, null);
        }
        
        public void GetTripsByRouteAsync(string key, string route_id, string changeset_id, object userState) {
            if ((this.onBeginGetTripsByRouteDelegate == null)) {
                this.onBeginGetTripsByRouteDelegate = new BeginOperationDelegate(this.OnBeginGetTripsByRoute);
            }
            if ((this.onEndGetTripsByRouteDelegate == null)) {
                this.onEndGetTripsByRouteDelegate = new EndOperationDelegate(this.OnEndGetTripsByRoute);
            }
            if ((this.onGetTripsByRouteCompletedDelegate == null)) {
                this.onGetTripsByRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTripsByRouteCompleted);
            }
            base.InvokeAsync(this.onBeginGetTripsByRouteDelegate, new object[] {
                        key,
                        route_id,
                        changeset_id}, this.onEndGetTripsByRouteDelegate, this.onGetTripsByRouteCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetVehicle(string key, string vehicle_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVehicle(key, vehicle_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetVehicle(System.IAsyncResult result) {
            return base.Channel.EndGetVehicle(result);
        }
        
        private System.IAsyncResult OnBeginGetVehicle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string vehicle_id = ((string)(inValues[1]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetVehicle(key, vehicle_id, callback, asyncState);
        }
        
        private object[] OnEndGetVehicle(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetVehicle(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVehicleCompleted(object state) {
            if ((this.GetVehicleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVehicleCompleted(this, new GetVehicleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVehicleAsync(string key, string vehicle_id) {
            this.GetVehicleAsync(key, vehicle_id, null);
        }
        
        public void GetVehicleAsync(string key, string vehicle_id, object userState) {
            if ((this.onBeginGetVehicleDelegate == null)) {
                this.onBeginGetVehicleDelegate = new BeginOperationDelegate(this.OnBeginGetVehicle);
            }
            if ((this.onEndGetVehicleDelegate == null)) {
                this.onEndGetVehicleDelegate = new EndOperationDelegate(this.OnEndGetVehicle);
            }
            if ((this.onGetVehicleCompletedDelegate == null)) {
                this.onGetVehicleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVehicleCompleted);
            }
            base.InvokeAsync(this.onBeginGetVehicleDelegate, new object[] {
                        key,
                        vehicle_id}, this.onEndGetVehicleDelegate, this.onGetVehicleCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetVehicles(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVehicles(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetVehicles(System.IAsyncResult result) {
            return base.Channel.EndGetVehicles(result);
        }
        
        private System.IAsyncResult OnBeginGetVehicles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetVehicles(key, callback, asyncState);
        }
        
        private object[] OnEndGetVehicles(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetVehicles(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVehiclesCompleted(object state) {
            if ((this.GetVehiclesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVehiclesCompleted(this, new GetVehiclesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVehiclesAsync(string key) {
            this.GetVehiclesAsync(key, null);
        }
        
        public void GetVehiclesAsync(string key, object userState) {
            if ((this.onBeginGetVehiclesDelegate == null)) {
                this.onBeginGetVehiclesDelegate = new BeginOperationDelegate(this.OnBeginGetVehicles);
            }
            if ((this.onEndGetVehiclesDelegate == null)) {
                this.onEndGetVehiclesDelegate = new EndOperationDelegate(this.OnEndGetVehicles);
            }
            if ((this.onGetVehiclesCompletedDelegate == null)) {
                this.onGetVehiclesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVehiclesCompleted);
            }
            base.InvokeAsync(this.onBeginGetVehiclesDelegate, new object[] {
                        key}, this.onEndGetVehiclesDelegate, this.onGetVehiclesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult LiveTileScheduledTaskAgent.MTDService.IWsService.BeginGetVehiclesByRoute(string key, string route_id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVehiclesByRoute(key, route_id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        LiveTileScheduledTaskAgent.MTDService.rsp LiveTileScheduledTaskAgent.MTDService.IWsService.EndGetVehiclesByRoute(System.IAsyncResult result) {
            return base.Channel.EndGetVehiclesByRoute(result);
        }
        
        private System.IAsyncResult OnBeginGetVehiclesByRoute(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            string route_id = ((string)(inValues[1]));
            return ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).BeginGetVehiclesByRoute(key, route_id, callback, asyncState);
        }
        
        private object[] OnEndGetVehiclesByRoute(System.IAsyncResult result) {
            LiveTileScheduledTaskAgent.MTDService.rsp retVal = ((LiveTileScheduledTaskAgent.MTDService.IWsService)(this)).EndGetVehiclesByRoute(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVehiclesByRouteCompleted(object state) {
            if ((this.GetVehiclesByRouteCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVehiclesByRouteCompleted(this, new GetVehiclesByRouteCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVehiclesByRouteAsync(string key, string route_id) {
            this.GetVehiclesByRouteAsync(key, route_id, null);
        }
        
        public void GetVehiclesByRouteAsync(string key, string route_id, object userState) {
            if ((this.onBeginGetVehiclesByRouteDelegate == null)) {
                this.onBeginGetVehiclesByRouteDelegate = new BeginOperationDelegate(this.OnBeginGetVehiclesByRoute);
            }
            if ((this.onEndGetVehiclesByRouteDelegate == null)) {
                this.onEndGetVehiclesByRouteDelegate = new EndOperationDelegate(this.OnEndGetVehiclesByRoute);
            }
            if ((this.onGetVehiclesByRouteCompletedDelegate == null)) {
                this.onGetVehiclesByRouteCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVehiclesByRouteCompleted);
            }
            base.InvokeAsync(this.onBeginGetVehiclesByRouteDelegate, new object[] {
                        key,
                        route_id}, this.onEndGetVehiclesByRouteDelegate, this.onGetVehiclesByRouteCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override LiveTileScheduledTaskAgent.MTDService.IWsService CreateChannel() {
            return new WsServiceClientChannel(this);
        }
        
        private class WsServiceClientChannel : ChannelBase<LiveTileScheduledTaskAgent.MTDService.IWsService>, LiveTileScheduledTaskAgent.MTDService.IWsService {
            
            public WsServiceClientChannel(System.ServiceModel.ClientBase<LiveTileScheduledTaskAgent.MTDService.IWsService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetApiUsage(string key, string version, string method, string start_date, string end_date, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = key;
                _args[1] = version;
                _args[2] = method;
                _args[3] = start_date;
                _args[4] = end_date;
                System.IAsyncResult _result = base.BeginInvoke("GetApiUsage", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetApiUsage(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetApiUsage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCalendarDatesByDate(string key, string date, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = date;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetCalendarDatesByDate", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetCalendarDatesByDate(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetCalendarDatesByDate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCalendarDatesByService(string key, string service_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = service_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetCalendarDatesByService", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetCalendarDatesByService(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetCalendarDatesByService", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDeparturesByStop(string key, string stop_id, string route_id, int pt, int count, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = key;
                _args[1] = stop_id;
                _args[2] = route_id;
                _args[3] = pt;
                _args[4] = count;
                System.IAsyncResult _result = base.BeginInvoke("GetDeparturesByStop", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetDeparturesByStop(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetDeparturesByStop", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLastFeedUpdate(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetLastFeedUpdate", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetLastFeedUpdate(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetLastFeedUpdate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPlannedTripsByLatLon(string key, decimal origin_lat, decimal origin_lon, decimal destination_lat, decimal destination_lon, string date, string time, decimal max_walk, string minimize, string arrive_depart, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = key;
                _args[1] = origin_lat;
                _args[2] = origin_lon;
                _args[3] = destination_lat;
                _args[4] = destination_lon;
                _args[5] = date;
                _args[6] = time;
                _args[7] = max_walk;
                _args[8] = minimize;
                _args[9] = arrive_depart;
                System.IAsyncResult _result = base.BeginInvoke("GetPlannedTripsByLatLon", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetPlannedTripsByLatLon(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetPlannedTripsByLatLon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetPlannedTripsByStops(string key, string origin_stop_id, string destination_stop_id, string date, string time, decimal max_walk, string minimize, string arrive_depart, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = key;
                _args[1] = origin_stop_id;
                _args[2] = destination_stop_id;
                _args[3] = date;
                _args[4] = time;
                _args[5] = max_walk;
                _args[6] = minimize;
                _args[7] = arrive_depart;
                System.IAsyncResult _result = base.BeginInvoke("GetPlannedTripsByStops", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetPlannedTripsByStops(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetPlannedTripsByStops", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReroutes(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetReroutes", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetReroutes(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetReroutes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetReroutesByRoute(string key, string route_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = route_id;
                System.IAsyncResult _result = base.BeginInvoke("GetReroutesByRoute", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetReroutesByRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetReroutesByRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRoute(string key, string route_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = route_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetRoute", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRoutes(string key, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetRoutes", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetRoutes(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetRoutes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRoutesByStop(string key, string stop_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = stop_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetRoutesByStop", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetRoutesByStop(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetRoutesByStop", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetShape(string key, string shape_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = shape_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetShape", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetShape(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetShape", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetShapeBetweenStops(string key, string begin_stop_id, string end_stop_id, string shape_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = key;
                _args[1] = begin_stop_id;
                _args[2] = end_stop_id;
                _args[3] = shape_id;
                _args[4] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetShapeBetweenStops", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetShapeBetweenStops(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetShapeBetweenStops", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStop(string key, string stop_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = stop_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetStop", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetStop(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetStop", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStops(string key, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetStops", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetStops(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetStops", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStopsBySearch(string key, string query, int count, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = key;
                _args[1] = query;
                _args[2] = count;
                _args[3] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetStopsBySearch", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopsBySearch(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetStopsBySearch", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStopsByLatLon(string key, decimal lat, decimal lon, int count, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = key;
                _args[1] = lat;
                _args[2] = lon;
                _args[3] = count;
                _args[4] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetStopsByLatLon", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopsByLatLon(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetStopsByLatLon", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStopTimesByTrip(string key, string trip_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = trip_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetStopTimesByTrip", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopTimesByTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetStopTimesByTrip", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetStopTimesByStop(string key, string stop_id, string route_id, string date, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = key;
                _args[1] = stop_id;
                _args[2] = route_id;
                _args[3] = date;
                _args[4] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetStopTimesByStop", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetStopTimesByStop(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetStopTimesByStop", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTrip(string key, string trip_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = trip_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetTrip", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetTrip(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetTrip", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTripsByBlock(string key, string block_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = block_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetTripsByBlock", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetTripsByBlock(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetTripsByBlock", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTripsByRoute(string key, string route_id, string changeset_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = key;
                _args[1] = route_id;
                _args[2] = changeset_id;
                System.IAsyncResult _result = base.BeginInvoke("GetTripsByRoute", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetTripsByRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetTripsByRoute", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVehicle(string key, string vehicle_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = vehicle_id;
                System.IAsyncResult _result = base.BeginInvoke("GetVehicle", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetVehicle(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetVehicle", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVehicles(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetVehicles", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetVehicles(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetVehicles", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVehiclesByRoute(string key, string route_id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = key;
                _args[1] = route_id;
                System.IAsyncResult _result = base.BeginInvoke("GetVehiclesByRoute", _args, callback, asyncState);
                return _result;
            }
            
            public LiveTileScheduledTaskAgent.MTDService.rsp EndGetVehiclesByRoute(System.IAsyncResult result) {
                object[] _args = new object[0];
                LiveTileScheduledTaskAgent.MTDService.rsp _result = ((LiveTileScheduledTaskAgent.MTDService.rsp)(base.EndInvoke("GetVehiclesByRoute", _args, result)));
                return _result;
            }
        }
    }
}
